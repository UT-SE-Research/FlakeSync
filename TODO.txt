1.
-Use NonDex code to run surefire test
-Adding maven dependencies
       -Look in imports and pom.xml
       -Google the class and figure out which .jar,
       -usually .jar files will be on maven central
2. Make sure it works on other repositories, see if
    -If mvn surefire:test fails, it is a me problem
    -If it works consistently --> get fail data

    Notes:
        davidmoten/rxjava2-extras
            -> mvn test -Dtest=TransformerDecodeTest#testIsUtilClass <-
            pom.xml file contained:
             <plugin>
                            <groupId>org.apache.maven.plugins</groupId>
                            <artifactId>maven-surefire-plugin</artifactId>
                            <version>3.5.1</version>
                            <configuration>
                                <!-- required to get jacoco to work locally -->
                                <!-- <argLine>@{argLine}</argLine> -->
                            </configuration>
            </plugin>
                    -I needed to comment out <argLine>@{argLine}</argLine> for the plugin to work
            Ran TransformerDecodeTest#testIsUtilClass -->fail, "Surefire failed when running tests for clean_..."
        elasticjob/elastic-job-lite
            Did not compile on local machine
        flaxsearch/luwak:
            Ran TestCollectionUtils#testPartitions --> pass with plugin
        fluent/fluent-logger-java
            Did not compile on local machine
        javadelight/delight-nashorn-sandbox
            Ran TestAccessFunction#test_access_variable -->pass with plugin
        nlighten/tomcat-exporter
             -> mvn test -Dtest=TomcatJDbcp2PoolExportsTest#testJDbcp2PoolMetrics -pl client <- WORKS
             -> mvn surefire:test -Dtest=TomcatJDbcp2PoolExportsTest#testJDbcp2PoolMetrics -pl client <- WORKS
             -> mvn surefire:test -Dtest=TomcatJDbcp2PoolExportsTest#testJDbcp2PoolMetrics <- DOES NOT WORK (needs "-pl client")
            Ran TomcatJDbcp2PoolExportsTest#testJDbcp2PoolMetrics -->fail, "Surefire failed when running tests for clean_..."
        qos-ch/logback
            Did not compile on local machine
        undertow-io/undertow
            ->mvn test -pl core <- WORKS
            ->mvn test -Dtest=TLS13HalfCloseHangTestCase#testHang -pl core -am <- DOES NOT WORK
            ->mvn test -Dtest=TLS13HalfCloseHangTestCase#testHang -pl core <- DOES NOT WORK
            Keep getting "No tests to run."
            Ran TLS13HalfCloseHangTestCase#testHang -->fail, "Surefire failed when running tests for clean_..."

3. Next step: Run one test at a time
    -Make a method that only runs one test
        -API-like design
    -Get result of that test, whether passed or failed
    -Add to NonDex config "rewriting the xml"
    TESTING:
    -Write your own input.csv file & write a bash script that can iterate through and run each test using the plugin
        - USE THIS FOR EASE "cut -d, -f1 all_input.csv | sort -u | wc -l"
        - Choose 1 test per project, maybe 1 per module

        -flaxsearch/luwak: TestPartitionMatcher.testParallelSlowLog
        -fluent/fluent-logger:  Source option 6 is no longer supported. Use 7 or later.
                                Target option 6 is no longer supported. Use 7 or later.
        -^^^Same error for qos-ch/logback, apache/httpcore
        -
4. core contains the flakesync-core artifact files (this is already java code)
    - Replace flakesync-core with flakesync-delay-core (written by Shanto) --> make sure it compiles
    -the agent is the jar file
    -"-javaagent:$THE_PATH_TO_AGENT_JAR/flakeDelay-core-0.1-SNAPSHOT.jar" construct this by:
        -Maven should have API to get .m2
        -get path to the core module i create
    -Should not have to modify the pom.xml file

5. Next step: Run test but with delays like delay injection--> minimizer agent
    -Run test for concurrent methods
          -Add agent as part of the argline
            -Agent modifies the pom.xml and adds the dependencies
          -Look for agent in the bash script

6. Hack the core a little bit and change where it writes results to --> .flakesync (DONE)

Do not make new module, make new Mojo inside previous module

7. find -name "*.class" | grep -v Tests | sed 's;.*target/classes/;;'| sed 's;/;.;g' | sed 's;.class$;;' > whitelist.txt
    - This is how the whitelist.txt is created, have the developer pass this in as a paramter( -Dflakesync.whitelist=....)
    - For concurrent methods, assume that the file exists in the hardcoded location
    - for d in ${delayArray[@]}; do
                  echo "delay === $d"
                  timeout 2h mvn test $JMVNOPTIONS -pl $module -Dconcurrentmethods="$currentDir/Locations/ConcurrentMethodsWhiteList-$projName.txt" -Dwhitelist="$currentDir/Locations/whitelist-$projName.txt" -Dtest=$testName -Ddelay=$d > "$currentDir/logs/$projName-$d.txt"

                  bugCount=$(grep -ic -E 'Errors: 1|Failures: 1' "$currentDir/logs/$projName-$d.txt")
                  echo "$bugCount ****************"
                  if [[ $bugCount -gt 0  ]]; then
                      properDelay=$d
                      break
                  fi
              done
       --> THIS IN JAVA CODE, loop through the different delay lengths and look for errors
            -Start with a high delay, hard-code a really long delay


    <configuration>
              <systemPropertyVariables>
                <propertyName>propertyValue</propertyName>
                <buildDirectory>${project.build.directory}</buildDirectory>
                [...]
              </systemPropertyVariables>
    </configuration>


Features to add before deadline:
-No way to automatically generate code that creates the variables and code to synchronize execution
    -Possibly through JavaParser
    -Given a critical point, name of class/file, line number, find Java source code file and try to insert variable(static var)
    -Assuming you have critical and barrier point

Notes for 12/17 meeting:
*Need to find a way to not clear the file after running delay
**Automatically generate whitelist instead of passing it in
-Next steps:

e2e.sh runs + delay_injection_and_minimized_locations.sh
                - runs runAll.sh -->DONE
                     -- delta-debugging.sh -->TESTING
            + root_method_and_critical_point_search.sh
                - requires "boundaryPoint" agent
                - runs mvn-run-and-find-stack-trace.sh
                        ++ mvn test -pl $module -Dtest=$4  -Ddelay=$3  -Dlocations=$7 >  "$currentDir/logs/$projName-Flakesync.txt"
                     -- parse-stack-trace.sh
                     -- mvn test $JMVNOPTIONS -pl $module -Dtest=$testName -DsearchForMethodName="$currentDir/logs/org_loc.txt"
                     -- analyzeRootMethod.sh
                        ++ mvn test -pl $module -Dlocations="$currentDir/Locations/Root-${projName}-$lower_line_num.txt" -DmethodNameForDelayAtBeginning="$methodNameToInjectDelay" -Dtest=$testName -Ddelay=${delay} > "$currentDir/logs/Root-Beginning-log-${projName}-$delay.txt"
            + barrier_point_search.sh

echo "${item_location}:$testName" > "$currentDir/Locations/Line/$projName-$threadId-$j" --> overwrites
not_in_library_code=$(find . -name "${java_class_name}.java" | wc -l) --> maybe use whitelist

===================================================================
---TEST DELTA-DEBUGGING
    -Check for timeout error
        -If same error, try new way of invoking maven test
        -If not, retest critical search with new input
---Merge pre-delta-debugging commits into the main branch
    --checkout old commit, merge, checkout new commit
    --Update README.md


Reach out to shanto for repo version

==================================================================

--Clean everything and run everything and see if it still fails
        -- Check for any file pollution
        -- Grab all line numbers first and run all delayinjection at once
        -- Combine configurations of surefire executions
        -- Consider not running a surefire execution just to get line numbers
            --Reuse visitor implementation from Agent in order to bypass need for a surefire execution
            --Better to work off of byte code because this is how it is being done currently
        -- Possibly combine delta-debugging + crit search
        -- Combine concurrent methods + identifying the delay length
                1. Concurrent methods + delay(add delay everywhere)
                2. Delta-debugging
                3. Crit Search

--Try these refactorings in order to clean this up


