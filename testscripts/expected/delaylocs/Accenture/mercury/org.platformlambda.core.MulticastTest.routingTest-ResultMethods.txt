nonapi/io/github/classgraph/reflection/ReflectionUtils$PrivilegedActionInvocationHandler.invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
org/yaml/snakeyaml/tokens/BlockEntryToken.getTokenId()Lorg/yaml/snakeyaml/tokens/Token$ID;
org/platformlambda/core/util/MultiLevelMap.isListElement(Ljava/lang/String;)Z
nonapi/io/github/classgraph/utils/JarUtils.smartPathSplit(Ljava/lang/String;CLnonapi/io/github/classgraph/scanspec/ScanSpec;)[Ljava/lang/String;
org/platformlambda/core/util/MultiLevelMap.isComposite(Ljava/lang/String;)Z
nonapi/io/github/classgraph/utils/FileUtils$2.call()Ljava/lang/Object;
io/github/classgraph/ScanResult.getClasspathURLs()Ljava/util/List;
org/platformlambda/core/system/ServiceDef.getFunction()Lorg/platformlambda/core/models/TypedLambdaFunction;
org/platformlambda/core/system/Platform.getName()Ljava/lang/String;
nonapi/io/github/classgraph/classpath/SystemJarFinder.getJreRtJarPath()Ljava/lang/String;
org/platformlambda/core/util/CryptoApi.getMd5([B)[B
org/yaml/snakeyaml/composer/Composer.getNode()Lorg/yaml/snakeyaml/nodes/Node;
org/yaml/snakeyaml/scanner/ScannerImpl.scanPlain()Lorg/yaml/snakeyaml/tokens/Token;
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler.markSliceAsOpen(Lnonapi/io/github/classgraph/fileslice/Slice;)V
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler.access$500(Lnonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler;)Lnonapi/io/github/classgraph/recycler/Recycler;
org/yaml/snakeyaml/reader/StreamReader.forward()V
io/github/classgraph/Scanner.preprocessClasspathElementsByType(Ljava/util/List;Lnonapi/io/github/classgraph/utils/LogNode;)V
io/github/classgraph/Scanner$2$1.newInstance()Ljava/lang/Object;
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$RecyclableInflater.reset()V
nonapi/io/github/classgraph/classpath/CallStackReader.access$000()[Ljava/lang/Class;
org/platformlambda/core/system/ServiceDef.inputIsEnvelope()Z
org/yaml/snakeyaml/scanner/ScannerImpl.getToken()Lorg/yaml/snakeyaml/tokens/Token;
org/platformlambda/core/system/EventEmitter.lambda$new$1(Ljava/lang/String;)V
org/yaml/snakeyaml/reader/StreamReader.forward(I)V
io/github/classgraph/Scanner.access$000(Ljava/lang/Object;)Ljava/lang/Object;
org/yaml/snakeyaml/reader/StreamReader.getIndex()I
org/yaml/snakeyaml/reader/StreamReader.getLine()I
org/platformlambda/core/system/EventEmitter.loadRouteSubstitution()V
org/yaml/snakeyaml/tokens/ScalarToken.getPlain()Z
nonapi/io/github/classgraph/utils/FileUtils.access$000()V
nonapi/io/github/classgraph/classpath/ClassLoaderOrder.add(Ljava/lang/ClassLoader;Lnonapi/io/github/classgraph/utils/LogNode;)V
nonapi/io/github/classgraph/reflection/StandardReflectionDriver$PrivilegedActionInvocationHandler.invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
org/yaml/snakeyaml/parser/ParserImpl$ParseBlockNode.produce()Lorg/yaml/snakeyaml/events/Event;
org/yaml/snakeyaml/constructor/SafeConstructor.flattenMapping(Lorg/yaml/snakeyaml/nodes/MappingNode;Z)V
org/platformlambda/core/util/MultiLevelMap.validateCompositePathSyntax(Ljava/lang/String;)V
org/yaml/snakeyaml/scanner/ScannerImpl.fetchPlain()V
io/github/classgraph/ResourceList.addAll(Ljava/util/Collection;)Z
org/platformlambda/core/util/MultiLevelMap.getIndexes(Ljava/lang/String;)Ljava/util/List;
org/yaml/snakeyaml/reader/StreamReader.prefixForward(I)Ljava/lang/String;
org/yaml/snakeyaml/DumperOptions$ScalarStyle.createStyle(Ljava/lang/Character;)Lorg/yaml/snakeyaml/DumperOptions$ScalarStyle;
org/platformlambda/core/system/EventEmitter.getInstance()Lorg/platformlambda/core/system/EventEmitter;
org/yaml/snakeyaml/DumperOptions.getIndent()I
org/yaml/snakeyaml/constructor/BaseConstructor.fillRecursive()V
org/platformlambda/core/util/AppConfigReader.getProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
io/github/classgraph/Scanner$2.processWorkUnit(Ljava/lang/Object;Lnonapi/io/github/classgraph/concurrency/WorkQueue;Lnonapi/io/github/classgraph/utils/LogNode;)V
org/platformlambda/core/system/Platform.registerPrivate(Ljava/lang/String;Lorg/platformlambda/core/models/TypedLambdaFunction;I)V
nonapi/io/github/classgraph/concurrency/SingletonMap$SingletonHolder.get()Ljava/lang/Object;
nonapi/io/github/classgraph/concurrency/SingletonMap.values()Ljava/util/List;
org/platformlambda/core/system/EventEmitter.addRouteSubstitution(Ljava/lang/String;Ljava/lang/String;)V
nonapi/io/github/classgraph/utils/FileUtils.canReadAndIsFile(Ljava/nio/file/Path;)Z
nonapi/io/github/classgraph/classpath/ModuleFinder.findModuleRefs(Ljava/util/LinkedHashSet;Lnonapi/io/github/classgraph/scanspec/ScanSpec;Lnonapi/io/github/classgraph/utils/LogNode;)Ljava/util/List;
org/yaml/snakeyaml/composer/Composer.composeSequenceNode(Ljava/lang/String;)Lorg/yaml/snakeyaml/nodes/Node;
nonapi/io/github/classgraph/classpath/CallStackReader$2.call()Ljava/lang/Object;
org/platformlambda/core/system/EventEmitter.lambda$new$0(Ljava/lang/String;)V
nonapi/io/github/classgraph/reflection/ReflectionDriver$ClassMemberCache.access$200(Lnonapi/io/github/classgraph/reflection/ReflectionDriver$ClassMemberCache;)Ljava/util/Map;
io/github/classgraph/PotentiallyUnmodifiableList$1.hasNext()Z
org/yaml/snakeyaml/scanner/SimpleKey.getTokenNumber()I
org/yaml/snakeyaml/LoaderOptions.isAllowDuplicateKeys()Z
org/yaml/snakeyaml/composer/Composer.composeScalarNode(Ljava/lang/String;Ljava/util/List;)Lorg/yaml/snakeyaml/nodes/Node;
nonapi/io/github/classgraph/scanspec/AcceptReject.matchesPatternList(Ljava/lang/String;Ljava/util/List;)Z
io/github/classgraph/Scanner.call()Ljava/lang/Object;
org/platformlambda/core/util/MultiLevelMap.getElement(Ljava/lang/String;)Ljava/lang/Object;
nonapi/io/github/classgraph/concurrency/InterruptionChecker.getExecutionException()Ljava/util/concurrent/ExecutionException;
org/platformlambda/core/system/Platform.lambda$waitForProviders$3(Ljava/util/List;ILio/vertx/core/Promise;)V
nonapi/io/github/classgraph/fastzipfilereader/LogicalZipFile.readCentralDirectory(Lnonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler;Lnonapi/io/github/classgraph/utils/LogNode;)V
org/yaml/snakeyaml/constructor/SafeConstructor$ConstructYamlSeq.construct(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
nonapi/io/github/classgraph/classloaderhandler/JBossClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
nonapi/io/github/classgraph/concurrency/SimpleThreadFactory.newThread(Ljava/lang/Runnable;)Ljava/lang/Thread;
io/github/classgraph/ScanResult.getClassLoaderOrderRespectingParentDelegation()[Ljava/lang/ClassLoader;
io/github/classgraph/Scanner.access$300(Lio/github/classgraph/Scanner;)Lnonapi/io/github/classgraph/concurrency/SingletonMap;
org/yaml/snakeyaml/composer/Composer.decreaseNestingDepth()V
nonapi/io/github/classgraph/reflection/StandardReflectionDriver.makeAccessible(Ljava/lang/Object;Ljava/lang/reflect/AccessibleObject;)Z
io/github/classgraph/Scanner$3.compare(Ljava/util/AbstractMap$SimpleEntry;Ljava/util/AbstractMap$SimpleEntry;)I
org/yaml/snakeyaml/reader/StreamReader.ensureEnoughData()Z
nonapi/io/github/classgraph/fileslice/reader/RandomAccessArrayReader.readInt(J)I
org/yaml/snakeyaml/scanner/ScannerImpl.addIndent(I)Z
org/yaml/snakeyaml/Yaml.load(Ljava/lang/String;)Ljava/lang/Object;
org/yaml/snakeyaml/scanner/ScannerImpl.checkValue()Z
org/yaml/snakeyaml/reader/StreamReader.peek()I
org/yaml/snakeyaml/constructor/BaseConstructor.constructScalar(Lorg/yaml/snakeyaml/nodes/ScalarNode;)Ljava/lang/String;
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler.access$200(Lnonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler;)Lnonapi/io/github/classgraph/concurrency/SingletonMap;
nonapi/io/github/classgraph/utils/JarUtils.leafName(Ljava/lang/String;)Ljava/lang/String;
io/github/classgraph/Scanner.normalizeClasspathEntry(Ljava/lang/Object;)Ljava/lang/Object;
io/github/classgraph/Scanner.newClasspathEntryWorkUnitProcessor(Ljava/util/Set;Ljava/util/Set;)Lnonapi/io/github/classgraph/concurrency/WorkQueue$WorkUnitProcessor;
org/yaml/snakeyaml/scanner/ScannerImpl.scanLineBreak()Ljava/lang/String;
nonapi/io/github/classgraph/scanspec/ScanSpec.dirAcceptMatchStatus(Ljava/lang/String;)Lnonapi/io/github/classgraph/scanspec/ScanSpec$ScanSpecPathMatch;
org/platformlambda/core/system/EventEmitter.loadMulticast(Ljava/lang/String;Ljava/util/Map;)V
org/platformlambda/core/util/AppConfigReader.getInstance()Lorg/platformlambda/core/util/AppConfigReader;
nonapi/io/github/classgraph/scanspec/AcceptReject$AcceptRejectLeafname.isRejected(Ljava/lang/String;)Z
org/yaml/snakeyaml/scanner/ScannerImpl.fetchDouble()V
nonapi/io/github/classgraph/concurrency/SingletonMap.get(Ljava/lang/Object;Lnonapi/io/github/classgraph/utils/LogNode;Lnonapi/io/github/classgraph/concurrency/SingletonMap$NewInstanceFactory;)Ljava/lang/Object;
nonapi/io/github/classgraph/recycler/Recycler.forceClose()V
org/platformlambda/core/system/ServiceDef.isCoroutine()Z
nonapi/io/github/classgraph/classpath/ClasspathOrder.getOrder()Ljava/util/List;
nonapi/io/github/classgraph/recycler/Recycler.close()V
org/yaml/snakeyaml/constructor/BaseConstructor.constructMapping(Lorg/yaml/snakeyaml/nodes/MappingNode;)Ljava/util/Map;
org/platformlambda/core/util/MultiLevelMap.getElement(Ljava/lang/String;Ljava/util/Map;)Ljava/lang/Object;
nonapi/io/github/classgraph/fileslice/reader/RandomAccessArrayReader.readUnsignedShort(J)I
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler.close(Lnonapi/io/github/classgraph/utils/LogNode;)V
org/yaml/snakeyaml/nodes/NodeTuple.getValueNode()Lorg/yaml/snakeyaml/nodes/Node;
nonapi/io/github/classgraph/utils/FileUtils.access$100(Ljava/nio/ByteBuffer;Lnonapi/io/github/classgraph/utils/LogNode;)Z
nonapi/io/github/classgraph/reflection/StandardReflectionDriver.getField(Ljava/lang/Object;Ljava/lang/reflect/Field;)Ljava/lang/Object;
org/yaml/snakeyaml/DumperOptions.getIndicatorIndent()I
org/yaml/snakeyaml/scanner/ScannerImpl.checkBlockEntry()Z
nonapi/io/github/classgraph/classloaderhandler/FelixClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
nonapi/io/github/classgraph/reflection/ReflectionDriver.findMethod(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
org/yaml/snakeyaml/constructor/BaseConstructor.getSingleData(Ljava/lang/Class;)Ljava/lang/Object;
org/yaml/snakeyaml/nodes/NodeTuple.getKeyNode()Lorg/yaml/snakeyaml/nodes/Node;
nonapi/io/github/classgraph/concurrency/SingletonMap.get(Ljava/lang/Object;Lnonapi/io/github/classgraph/utils/LogNode;)Ljava/lang/Object;
nonapi/io/github/classgraph/scanspec/AcceptReject$AcceptRejectLeafname.isAcceptedAndNotRejected(Ljava/lang/String;)Z
nonapi/io/github/classgraph/scanspec/AcceptReject$AcceptRejectWholeString.isRejected(Ljava/lang/String;)Z
io/github/classgraph/ScanResult.getClasspathURIs()Ljava/util/List;
nonapi/io/github/classgraph/concurrency/SingletonMap.clear()V
org/platformlambda/core/system/ServiceDef.getConcurrency()I
org/yaml/snakeyaml/nodes/SequenceNode.getValue()Ljava/util/List;
org/platformlambda/core/system/Platform.waitForProvider(Ljava/lang/String;I)Lio/vertx/core/Future;
nonapi/io/github/classgraph/reflection/StandardReflectionDriver.invokeMethod(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
org/yaml/snakeyaml/constructor/SafeConstructor.processDuplicateKeys(Lorg/yaml/snakeyaml/nodes/MappingNode;Z)V
nonapi/io/github/classgraph/utils/FileUtils$2.call()Ljava/lang/Boolean;
org/yaml/snakeyaml/comments/CommentEventsCollector.isEventExpected(Lorg/yaml/snakeyaml/events/Event;)Z
org/yaml/snakeyaml/composer/Composer.composeNode(Lorg/yaml/snakeyaml/nodes/Node;)Lorg/yaml/snakeyaml/nodes/Node;
nonapi/io/github/classgraph/reflection/StandardReflectionDriver$1.call()Ljava/lang/Object;
nonapi/io/github/classgraph/reflection/ReflectionUtils.invokeMethod(ZLjava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
org/yaml/snakeyaml/composer/Composer.increaseNestingDepth()V
nonapi/io/github/classgraph/fastzipfilereader/LogicalZipFile.getManifestValue([BI)Ljava/util/Map$Entry;
org/yaml/snakeyaml/DumperOptions.getTimeZone()Ljava/util/TimeZone;
nonapi/io/github/classgraph/concurrency/WorkQueue.runWorkQueue(Ljava/util/Collection;Ljava/util/concurrent/ExecutorService;Lnonapi/io/github/classgraph/concurrency/InterruptionChecker;ILnonapi/io/github/classgraph/utils/LogNode;Lnonapi/io/github/classgraph/concurrency/WorkQueue$WorkUnitProcessor;)V
org/yaml/snakeyaml/parser/ParserImpl.access$102(Lorg/yaml/snakeyaml/parser/ParserImpl;Lorg/yaml/snakeyaml/parser/Production;)Lorg/yaml/snakeyaml/parser/Production;
io/github/classgraph/ClassGraph.scan()Lio/github/classgraph/ScanResult;
org/yaml/snakeyaml/scanner/ScannerImpl.nextPossibleSimpleKey()I
nonapi/io/github/classgraph/fileslice/ArraySlice.randomAccessReader()Lnonapi/io/github/classgraph/fileslice/reader/RandomAccessReader;
org/yaml/snakeyaml/constructor/BaseConstructor.addTypeDescription(Lorg/yaml/snakeyaml/TypeDescription;)Lorg/yaml/snakeyaml/TypeDescription;
org/platformlambda/core/system/Platform.hasRoute(Ljava/lang/String;)Z
org/yaml/snakeyaml/constructor/BaseConstructor.setPropertyUtils(Lorg/yaml/snakeyaml/introspector/PropertyUtils;)V
org/yaml/snakeyaml/parser/ParserImpl$ParseBlockMappingFirstKey.produce()Lorg/yaml/snakeyaml/events/Event;
org/platformlambda/core/system/Platform.lambda$waitForProviders$6(Lio/vertx/core/Promise;Ljava/util/List;IILjava/lang/Long;)V
nonapi/io/github/classgraph/scanspec/AcceptReject.normalizePath(Ljava/lang/String;)Ljava/lang/String;
nonapi/io/github/classgraph/classpath/ClasspathFinder.getModuleFinder()Lnonapi/io/github/classgraph/classpath/ModuleFinder;
org/yaml/snakeyaml/reader/StreamReader.isPrintable(I)Z
io/github/classgraph/Scanner.access$200(Lio/github/classgraph/Scanner;)Lnonapi/io/github/classgraph/scanspec/ScanSpec;
org/yaml/snakeyaml/TypeDescription.finalizeConstruction(Ljava/lang/Object;)Ljava/lang/Object;
org/platformlambda/core/system/Platform.initialize()V
nonapi/io/github/classgraph/classpath/ClassLoaderOrder.getAllParentClassLoaders()Ljava/util/Set;
org/yaml/snakeyaml/constructor/BaseConstructor.newInstance(Ljava/lang/Class;Lorg/yaml/snakeyaml/nodes/Node;Z)Ljava/lang/Object;
org/yaml/snakeyaml/constructor/BaseConstructor.getConstructor(Lorg/yaml/snakeyaml/nodes/Node;)Lorg/yaml/snakeyaml/constructor/Construct;
nonapi/io/github/classgraph/classloaderhandler/PlexusClassWorldsClassRealmClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
nonapi/io/github/classgraph/fastzipfilereader/FastZipEntry.compareTo(Ljava/lang/Object;)I
org/platformlambda/core/util/CryptoApi.getHash([BLjava/lang/String;)[B
io/github/classgraph/ResourceList.clear()V
org/yaml/snakeyaml/scanner/ScannerImpl.peekToken()Lorg/yaml/snakeyaml/tokens/Token;
org/yaml/snakeyaml/constructor/SafeConstructor$ConstructYamlMap.construct(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
nonapi/io/github/classgraph/classloaderhandler/ClassGraphClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
nonapi/io/github/classgraph/fileslice/FileSlice.close()V
org/yaml/snakeyaml/scanner/SimpleKey.isRequired()Z
org/platformlambda/core/system/EventEmitter.loadJournalRoutes(Ljava/util/Map;)V
org/yaml/snakeyaml/scanner/ScannerImpl.savePossibleSimpleKey()V
io/github/classgraph/ClassGraph.scanAsync(Ljava/util/concurrent/ExecutorService;I)Ljava/util/concurrent/Future;
nonapi/io/github/classgraph/scanspec/AcceptReject$AcceptRejectPrefix.isRejected(Ljava/lang/String;)Z
nonapi/io/github/classgraph/fileslice/FileSlice.randomAccessReader()Lnonapi/io/github/classgraph/fileslice/reader/RandomAccessReader;
org/platformlambda/core/system/Platform.getOrigin()Ljava/lang/String;
org/yaml/snakeyaml/representer/SafeRepresenter.getTimeZone()Ljava/util/TimeZone;
org/yaml/snakeyaml/constructor/BaseConstructor.newList(Lorg/yaml/snakeyaml/nodes/SequenceNode;)Ljava/util/List;
org/platformlambda/core/system/LocalPubSub.getInstance()Lorg/platformlambda/core/system/LocalPubSub;
io/github/classgraph/ClassGraph.scanAsync(ZLjava/util/concurrent/ExecutorService;I)Ljava/util/concurrent/Future;
io/github/classgraph/Scanner.findClasspathOrder(Ljava/util/Set;)Ljava/util/List;
io/github/classgraph/Scanner$4.processWorkUnit(Ljava/lang/Object;Lnonapi/io/github/classgraph/concurrency/WorkQueue;Lnonapi/io/github/classgraph/utils/LogNode;)V
org/yaml/snakeyaml/scanner/SimpleKey.getMark()Lorg/yaml/snakeyaml/error/Mark;
org/yaml/snakeyaml/reader/StreamReader.prefix(I)Ljava/lang/String;
nonapi/io/github/classgraph/classpath/ModuleFinder.findModuleRefsFromCallstack([Ljava/lang/Class;Lnonapi/io/github/classgraph/scanspec/ScanSpec;ZLnonapi/io/github/classgraph/utils/LogNode;)Ljava/util/List;
org/yaml/snakeyaml/constructor/BaseConstructor.setAllowDuplicateKeys(Z)V
nonapi/io/github/classgraph/classloaderhandler/EquinoxContextFinderClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
org/yaml/snakeyaml/DumperOptions.isAllowReadOnlyProperties()Z
org/yaml/snakeyaml/representer/Representer.getTimeZone()Ljava/util/TimeZone;
nonapi/io/github/classgraph/reflection/ReflectionUtils.getFieldVal(ZLjava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
nonapi/io/github/classgraph/reflection/StandardReflectionDriver.doPrivileged(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
nonapi/io/github/classgraph/classpath/ModuleFinder.getSystemModuleRefs()Ljava/util/List;
nonapi/io/github/classgraph/scanspec/AcceptReject$AcceptRejectWholeString.addToAccept(Ljava/lang/String;)V
org/platformlambda/core/system/ServiceQueue.access$300(Lorg/platformlambda/core/system/ServiceQueue;)Z
nonapi/io/github/classgraph/classpath/ModuleFinder.findLayerOrder(Ljava/lang/Object;Ljava/util/Set;Ljava/util/Set;Ljava/util/Deque;)V
io/github/classgraph/PotentiallyUnmodifiableList.iterator()Ljava/util/Iterator;
org/yaml/snakeyaml/util/ArrayStack.push(Ljava/lang/Object;)V
org/platformlambda/core/system/ServiceQueue.access$500(Lorg/platformlambda/core/system/ServiceQueue;)Ljava/util/concurrent/ConcurrentLinkedQueue;
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$4.newInstance(Ljava/lang/String;Lnonapi/io/github/classgraph/utils/LogNode;)Ljava/util/Map$Entry;
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler.openInflaterInputStream(Ljava/io/InputStream;)Ljava/io/InputStream;
org/platformlambda/core/system/Platform.getInstance()Lorg/platformlambda/core/system/Platform;
org/yaml/snakeyaml/tokens/BlockMappingStartToken.getTokenId()Lorg/yaml/snakeyaml/tokens/Token$ID;
org/yaml/snakeyaml/scanner/ScannerImpl.scanFlowScalarNonSpaces(ZLorg/yaml/snakeyaml/error/Mark;)Ljava/lang/String;
org/platformlambda/core/util/SimpleCache.get(Ljava/lang/String;)Ljava/lang/Object;
io/github/classgraph/ClassGraph.scan(I)Lio/github/classgraph/ScanResult;
nonapi/io/github/classgraph/classpath/ClassLoaderOrder.getClassLoaderOrder()Ljava/util/List;
org/yaml/snakeyaml/nodes/Tag.isCompatible(Ljava/lang/Class;)Z
nonapi/io/github/classgraph/fileslice/reader/RandomAccessFileChannelReader.read(JLjava/nio/ByteBuffer;II)I
nonapi/io/github/classgraph/reflection/StandardReflectionDriver.access$000(Ljava/lang/reflect/AccessibleObject;)Z
io/github/classgraph/ResourceList.iterator()Ljava/util/Iterator;
org/yaml/snakeyaml/LoaderOptions.getNestingDepthLimit()I
org/yaml/snakeyaml/scanner/ScannerImpl.unwindIndent(I)V
org/yaml/snakeyaml/resolver/Resolver.resolve(Lorg/yaml/snakeyaml/nodes/NodeId;Ljava/lang/String;Z)Lorg/yaml/snakeyaml/nodes/Tag;
org/yaml/snakeyaml/scanner/ScannerImpl.fetchBlockEntry()V
nonapi/io/github/classgraph/fileslice/FileSlice.load()[B
org/yaml/snakeyaml/introspector/PropertyUtils.setAllowReadOnlyProperties(Z)V
org/yaml/snakeyaml/representer/BaseRepresenter.getDefaultFlowStyle()Lorg/yaml/snakeyaml/DumperOptions$FlowStyle;
org/yaml/snakeyaml/util/ArrayStack.pop()Ljava/lang/Object;
nonapi/io/github/classgraph/scanspec/ScanSpec.log(Lnonapi/io/github/classgraph/utils/LogNode;)V
nonapi/io/github/classgraph/classloaderhandler/EquinoxClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
org/yaml/snakeyaml/representer/BaseRepresenter.getDefaultScalarStyle()Lorg/yaml/snakeyaml/DumperOptions$ScalarStyle;
org/yaml/snakeyaml/parser/ParserImpl$ParseIndentlessSequenceEntryKey.produce()Lorg/yaml/snakeyaml/events/Event;
nonapi/io/github/classgraph/classloaderhandler/ClassLoaderHandlerRegistry$ClassLoaderHandlerRegistryEntry.findClasspathOrder(Ljava/lang/ClassLoader;Lnonapi/io/github/classgraph/classpath/ClasspathOrder;Lnonapi/io/github/classgraph/scanspec/ScanSpec;Lnonapi/io/github/classgraph/utils/LogNode;)V
org/yaml/snakeyaml/parser/ParserImpl$ParseImplicitDocumentStart.produce()Lorg/yaml/snakeyaml/events/Event;
org/yaml/snakeyaml/parser/ParserImpl$ParseIndentlessSequenceEntryValue.produce()Lorg/yaml/snakeyaml/events/Event;
kotlin/jvm/internal/Intrinsics.checkNotNullParameter(Ljava/lang/Object;Ljava/lang/String;)V
org/yaml/snakeyaml/resolver/ResolverTuple.getLimit()I
nonapi/io/github/classgraph/utils/CollectionUtils.sortIfNotEmpty(Ljava/util/List;)V
org/yaml/snakeyaml/parser/ParserImpl$ParseBlockSequenceEntryValue.produce()Lorg/yaml/snakeyaml/events/Event;
org/platformlambda/core/system/WorkerQueues.started()V
nonapi/io/github/classgraph/classpath/ClasspathFinder.getClasspathOrder()Lnonapi/io/github/classgraph/classpath/ClasspathOrder;
nonapi/io/github/classgraph/utils/FileUtils.closeDirectByteBuffer(Ljava/nio/ByteBuffer;Lnonapi/io/github/classgraph/reflection/ReflectionUtils;Lnonapi/io/github/classgraph/utils/LogNode;)Z
org/platformlambda/core/system/ServiceDef.isPrivate()Z
org/platformlambda/core/util/MultiLevelMap.getMap()Ljava/util/Map;
org/yaml/snakeyaml/util/UriEncoder.encode(Ljava/lang/String;)Ljava/lang/String;
org/platformlambda/core/system/Platform.getEventSystem()Lio/vertx/core/eventbus/EventBus;
org/yaml/snakeyaml/scanner/SimpleKey.getColumn()I
org/yaml/snakeyaml/tokens/ScalarToken.getTokenId()Lorg/yaml/snakeyaml/tokens/Token$ID;
org/yaml/snakeyaml/LoaderOptions.getCodePointLimit()I
org/yaml/snakeyaml/DumperOptions.setDefaultFlowStyle(Lorg/yaml/snakeyaml/DumperOptions$FlowStyle;)V
io/github/classgraph/PotentiallyUnmodifiableList.clear()V
org/platformlambda/core/system/LocalPubSub.lambda$createTopic$0(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;
org/yaml/snakeyaml/parser/ParserImpl.access$500(Lorg/yaml/snakeyaml/parser/ParserImpl;)Lorg/yaml/snakeyaml/util/ArrayStack;
org/platformlambda/core/system/ServiceQueue$ServiceHandler.handle(Ljava/lang/Object;)V
nonapi/io/github/classgraph/fileslice/reader/RandomAccessFileChannelReader.read(J[BII)I
org/yaml/snakeyaml/parser/ParserImpl.access$1200(Lorg/yaml/snakeyaml/parser/ParserImpl;ZZ)Lorg/yaml/snakeyaml/events/Event;
org/yaml/snakeyaml/constructor/BaseConstructor.createDefaultList(I)Ljava/util/List;
nonapi/io/github/classgraph/classpath/CallStackReader.getClassContext(Lnonapi/io/github/classgraph/utils/LogNode;)[Ljava/lang/Class;
org/yaml/snakeyaml/constructor/BaseConstructor.finalizeConstruction(Lorg/yaml/snakeyaml/nodes/Node;Ljava/lang/Object;)Ljava/lang/Object;
org/yaml/snakeyaml/introspector/PropertyUtils.isAllowReadOnlyProperties()Z
org/yaml/snakeyaml/DumperOptions.getIndentWithIndicator()Z
nonapi/io/github/classgraph/utils/FastPathResolver.resolve(Ljava/lang/String;)Ljava/lang/String;
nonapi/io/github/classgraph/classloaderhandler/JPMSClassLoaderHandler.findClassLoaderOrder(Ljava/lang/ClassLoader;Lnonapi/io/github/classgraph/classpath/ClassLoaderOrder;Lnonapi/io/github/classgraph/utils/LogNode;)V
org/yaml/snakeyaml/reader/StreamReader.getMark()Lorg/yaml/snakeyaml/error/Mark;
org/platformlambda/core/util/AppConfigReader.getProperty(Ljava/lang/String;)Ljava/lang/String;
nonapi/io/github/classgraph/fileslice/FileSlice.slice(JJZJ)Lnonapi/io/github/classgraph/fileslice/Slice;
nonapi/io/github/classgraph/classpath/ClassLoaderOrder.getRegistryEntry(Ljava/lang/ClassLoader;Lnonapi/io/github/classgraph/utils/LogNode;)Lnonapi/io/github/classgraph/classloaderhandler/ClassLoaderHandlerRegistry$ClassLoaderHandlerRegistryEntry;
nonapi/io/github/classgraph/reflection/StandardReflectionDriver$1.call()Ljava/lang/Boolean;
org/yaml/snakeyaml/events/StreamEndEvent.getEventId()Lorg/yaml/snakeyaml/events/Event$ID;
org/yaml/snakeyaml/parser/ParserImpl$ParseBlockMappingValue.produce()Lorg/yaml/snakeyaml/events/Event;
org/yaml/snakeyaml/constructor/BaseConstructor.setComposer(Lorg/yaml/snakeyaml/composer/Composer;)V
io/github/classgraph/ModuleRef.isSystemModule()Z
org/yaml/snakeyaml/constructor/BaseConstructor.isExplicitPropertyUtils()Z
org/yaml/snakeyaml/parser/ParserImpl.access$1000(Lorg/yaml/snakeyaml/parser/ParserImpl;)Lorg/yaml/snakeyaml/util/ArrayStack;
org/yaml/snakeyaml/tokens/ScalarToken.getStyle()Lorg/yaml/snakeyaml/DumperOptions$ScalarStyle;
nonapi/io/github/classgraph/classloaderhandler/ParentLastDelegationOrderTestClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
org/yaml/snakeyaml/events/SequenceEndEvent.getEventId()Lorg/yaml/snakeyaml/events/Event$ID;
nonapi/io/github/classgraph/utils/FileUtils.canReadAndIsDir(Ljava/io/File;)Z
org/yaml/snakeyaml/events/ImplicitTuple.canOmitTagInPlainScalar()Z
org/yaml/snakeyaml/scanner/ScannerImpl.scanPlainSpaces()Ljava/lang/String;
nonapi/io/github/classgraph/reflection/ReflectionUtils.invokeMethod(ZLjava/lang/Object;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;
org/platformlambda/core/util/AppConfigReader.get(Ljava/lang/String;)Ljava/lang/Object;
io/github/classgraph/Scanner.processWorkUnits(Ljava/util/Collection;Lnonapi/io/github/classgraph/utils/LogNode;Lnonapi/io/github/classgraph/concurrency/WorkQueue$WorkUnitProcessor;)V
nonapi/io/github/classgraph/fileslice/reader/RandomAccessFileChannelReader.readUnsignedShort(J)I
org/yaml/snakeyaml/composer/Composer.composeMappingNode(Ljava/lang/String;)Lorg/yaml/snakeyaml/nodes/Node;
nonapi/io/github/classgraph/fileslice/reader/RandomAccessArrayReader.readUnsignedInt(J)J
org/yaml/snakeyaml/events/DocumentStartEvent.getEventId()Lorg/yaml/snakeyaml/events/Event$ID;
io/github/classgraph/ModuleRef.hashCode()I
nonapi/io/github/classgraph/reflection/ReflectionDriver$ClassMemberCache.access$100(Lnonapi/io/github/classgraph/reflection/ReflectionDriver$ClassMemberCache;)Ljava/util/Map;
nonapi/io/github/classgraph/fastzipfilereader/ZipFileSlice.isAcceptedAndNotRejected(Lnonapi/io/github/classgraph/scanspec/AcceptReject$AcceptRejectLeafname;)Z
nonapi/io/github/classgraph/fastzipfilereader/ZipFileSlice.getPhysicalFile()Ljava/io/File;
org/platformlambda/core/system/ServiceQueue.access$302(Lorg/platformlambda/core/system/ServiceQueue;Z)Z
org/platformlambda/core/system/ServiceDef.isInterceptor()Z
org/yaml/snakeyaml/nodes/Tag.isSecondary()Z
org/yaml/snakeyaml/nodes/ScalarNode.getValue()Ljava/lang/String;
org/yaml/snakeyaml/external/com/google/gdata/util/common/base/PercentEscaper.escape(Ljava/lang/String;)Ljava/lang/String;
org/yaml/snakeyaml/resolver/Resolver.addImplicitResolver(Lorg/yaml/snakeyaml/nodes/Tag;Ljava/util/regex/Pattern;Ljava/lang/String;)V
org/yaml/snakeyaml/constructor/BaseConstructor.constructSequence(Lorg/yaml/snakeyaml/nodes/SequenceNode;)Ljava/util/List;
org/yaml/snakeyaml/Yaml.initDumperOptions(Lorg/yaml/snakeyaml/representer/Representer;)Lorg/yaml/snakeyaml/DumperOptions;
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$4.newInstance(Ljava/lang/Object;Lnonapi/io/github/classgraph/utils/LogNode;)Ljava/lang/Object;
io/github/classgraph/Scanner.performScan(Ljava/util/List;Ljava/util/List;Lnonapi/io/github/classgraph/classpath/ClasspathFinder;)Lio/github/classgraph/ScanResult;
org/yaml/snakeyaml/constructor/BaseConstructor.constructObjectNoCheck(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
org/yaml/snakeyaml/DumperOptions.getDefaultFlowStyle()Lorg/yaml/snakeyaml/DumperOptions$FlowStyle;
nonapi/io/github/classgraph/classpath/ClasspathOrder.addClasspathEntry(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/ClassLoader;Lnonapi/io/github/classgraph/scanspec/ScanSpec;)Z
org/platformlambda/core/system/ServiceQueue.access$400(Lorg/platformlambda/core/system/ServiceQueue;)Lorg/platformlambda/core/util/ElasticQueue;
nonapi/io/github/classgraph/classloaderhandler/AntClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
nonapi/io/github/classgraph/scanspec/AcceptReject.isSpecificallyAccepted(Ljava/lang/String;)Z
org/platformlambda/core/util/ElasticQueue.close()V
nonapi/io/github/classgraph/utils/VersionFinder.getProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
nonapi/io/github/classgraph/recycler/Recycler.acquire()Ljava/lang/Object;
org/yaml/snakeyaml/constructor/BaseConstructor.constructDocument(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
org/yaml/snakeyaml/scanner/ScannerImpl.addToken(Lorg/yaml/snakeyaml/tokens/Token;)V
nonapi/io/github/classgraph/scanspec/AcceptReject.access$000(Ljava/lang/String;Ljava/util/List;)Z
nonapi/io/github/classgraph/utils/CollectionUtils.sortCopy(Ljava/util/Collection;)Ljava/util/List;
org/yaml/snakeyaml/constructor/SafeConstructor.flattenMapping(Lorg/yaml/snakeyaml/nodes/MappingNode;)V
nonapi/io/github/classgraph/fastzipfilereader/FastZipEntry.getSlice()Lnonapi/io/github/classgraph/fileslice/Slice;
org/yaml/snakeyaml/scanner/ScannerImpl.stalePossibleSimpleKeys()V
org/yaml/snakeyaml/comments/CommentEventsCollector.isEmpty()Z
org/yaml/snakeyaml/nodes/Tag.hashCode()I
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$3.newInstance(Ljava/lang/Object;Lnonapi/io/github/classgraph/utils/LogNode;)Ljava/lang/Object;
nonapi/io/github/classgraph/utils/FileUtils.currDirPath()Ljava/lang/String;
org/platformlambda/core/util/MultiLevelMap.getListElement(Ljava/util/List;Ljava/util/List;)Ljava/lang/Object;
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$8.close()V
org/yaml/snakeyaml/parser/ParserImpl.parseNode(ZZ)Lorg/yaml/snakeyaml/events/Event;
io/github/classgraph/ModuleRef.compareTo(Lio/github/classgraph/ModuleRef;)I
nonapi/io/github/classgraph/reflection/ReflectionUtils.doPrivileged(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
org/yaml/snakeyaml/parser/ParserImpl$ParseBlockSequenceFirstEntry.produce()Lorg/yaml/snakeyaml/events/Event;
org/yaml/snakeyaml/scanner/SimpleKey.getIndex()I
org/platformlambda/core/system/ServiceDef.isTrackable()Z
nonapi/io/github/classgraph/fileslice/reader/RandomAccessFileChannelReader.readInt(J)I
org/yaml/snakeyaml/scanner/Constant.hasNo(I)Z
org/yaml/snakeyaml/tokens/BlockSequenceStartToken.getTokenId()Lorg/yaml/snakeyaml/tokens/Token$ID;
org/yaml/snakeyaml/tokens/ScalarToken.getValue()Ljava/lang/String;
nonapi/io/github/classgraph/fileslice/Slice.hashCode()I
org/yaml/snakeyaml/representer/Representer.setTimeZone(Ljava/util/TimeZone;)V
nonapi/io/github/classgraph/classpath/ClasspathOrder.addClasspathEntry(Ljava/lang/Object;Ljava/lang/ClassLoader;Lnonapi/io/github/classgraph/scanspec/ScanSpec;Lnonapi/io/github/classgraph/utils/LogNode;)Z
org/platformlambda/core/system/ServiceDef.isStream()Z
io/github/classgraph/ScanResult.getResourcesWithExtension(Ljava/lang/String;)Lio/github/classgraph/ResourceList;
io/github/classgraph/ScanResult.indexResourcesAndClassInfo(Lnonapi/io/github/classgraph/utils/LogNode;)V
org/yaml/snakeyaml/composer/Composer.getSingleNode()Lorg/yaml/snakeyaml/nodes/Node;
nonapi/io/github/classgraph/reflection/StandardReflectionDriver.getDeclaredFields(Ljava/lang/Class;)[Ljava/lang/reflect/Field;
io/github/classgraph/Scanner$4.processWorkUnit(Lio/github/classgraph/ClasspathElement;Lnonapi/io/github/classgraph/concurrency/WorkQueue;Lnonapi/io/github/classgraph/utils/LogNode;)V
nonapi/io/github/classgraph/fileslice/FileSlice.hashCode()I
nonapi/io/github/classgraph/fastzipfilereader/PhysicalZipFile.getPath()Ljava/nio/file/Path;
org/yaml/snakeyaml/reader/StreamReader.update()V
nonapi/io/github/classgraph/classpath/ClassLoaderOrder.delegateTo(Ljava/lang/ClassLoader;ZLnonapi/io/github/classgraph/utils/LogNode;)V
org/yaml/snakeyaml/composer/Composer.composeMappingChildren(Ljava/util/List;Lorg/yaml/snakeyaml/nodes/MappingNode;)V
org/yaml/snakeyaml/util/PlatformFeatureDetector.isRunningOnAndroid()Z
nonapi/io/github/classgraph/reflection/StandardReflectionDriver.invokeStaticMethod(Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
io/github/classgraph/ScanResult.close()V
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$3.newInstance(Lnonapi/io/github/classgraph/fastzipfilereader/ZipFileSlice;Lnonapi/io/github/classgraph/utils/LogNode;)Lnonapi/io/github/classgraph/fastzipfilereader/LogicalZipFile;
io/github/classgraph/PotentiallyUnmodifiableList.makeUnmodifiable()V
org/yaml/snakeyaml/events/MappingEndEvent.getEventId()Lorg/yaml/snakeyaml/events/Event$ID;
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$1.newInstance(Ljava/lang/Object;Lnonapi/io/github/classgraph/utils/LogNode;)Ljava/lang/Object;
nonapi/io/github/classgraph/concurrency/WorkQueue.sendPoisonPills()V
org/yaml/snakeyaml/reader/StreamReader.peek(I)I
nonapi/io/github/classgraph/fastzipfilereader/ZipFileSlice.appendPath(Ljava/lang/StringBuilder;)V
org/yaml/snakeyaml/scanner/ScannerImpl.fetchValue()V
org/yaml/snakeyaml/tokens/KeyToken.getTokenId()Lorg/yaml/snakeyaml/tokens/Token$ID;
org/yaml/snakeyaml/constructor/SafeConstructor$ConstructYamlStr.construct(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
nonapi/io/github/classgraph/classpath/ModuleFinder.getNonSystemModuleRefs()Ljava/util/List;
nonapi/io/github/classgraph/fileslice/reader/RandomAccessFileChannelReader.readShort(J)S
nonapi/io/github/classgraph/scanspec/AcceptReject.isSpecificallyAcceptedAndNotRejected(Ljava/lang/String;)Z
org/yaml/snakeyaml/scanner/Constant.has(ILjava/lang/String;)Z
nonapi/io/github/classgraph/classloaderhandler/ClassLoaderHandlerRegistry$ClassLoaderHandlerRegistryEntry.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$6.newInstance()Ljava/lang/Object;
org/yaml/snakeyaml/scanner/ScannerImpl.scanToNextToken()V
nonapi/io/github/classgraph/utils/FileUtils.canReadAndIsDir(Ljava/nio/file/Path;)Z
nonapi/io/github/classgraph/scanspec/AcceptReject$AcceptRejectLeafname.isAccepted(Ljava/lang/String;)Z
nonapi/io/github/classgraph/classloaderhandler/JPMSClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
org/yaml/snakeyaml/constructor/BaseConstructor.newInstance(Ljava/lang/Class;Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
org/platformlambda/core/util/ElasticQueue.resetCounter()V
nonapi/io/github/classgraph/utils/FileUtils.sanitizeEntryPath(Ljava/lang/String;ZZ)Ljava/lang/String;
nonapi/io/github/classgraph/fastzipfilereader/LogicalZipFile.keyMatchesAtPosition([B[BI)Z
org/platformlambda/core/system/ServiceQueue.access$700(Lorg/platformlambda/core/system/ServiceQueue;)Ljava/lang/String;
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$1.newInstance(Ljava/io/File;Lnonapi/io/github/classgraph/utils/LogNode;)Lnonapi/io/github/classgraph/fastzipfilereader/PhysicalZipFile;
org/yaml/snakeyaml/representer/BaseRepresenter.getPropertyUtils()Lorg/yaml/snakeyaml/introspector/PropertyUtils;
org/platformlambda/core/util/MultiLevelMap.setListElement(Ljava/util/List;Ljava/util/List;Ljava/lang/Object;)V
io/github/classgraph/PotentiallyUnmodifiableList.addAll(Ljava/util/Collection;)Z
nonapi/io/github/classgraph/reflection/ReflectionUtils.invokeStaticMethod(ZLjava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;
nonapi/io/github/classgraph/classpath/ClasspathFinder.getClassLoaderOrderRespectingParentDelegation()[Ljava/lang/ClassLoader;
nonapi/io/github/classgraph/classpath/SystemJarFinder.getJreLibOrExtJars()Ljava/util/Set;
org/yaml/snakeyaml/constructor/BaseConstructor.newMap(Lorg/yaml/snakeyaml/nodes/MappingNode;)Ljava/util/Map;
org/yaml/snakeyaml/scanner/Constant.hasNo(ILjava/lang/String;)Z
nonapi/io/github/classgraph/fileslice/reader/RandomAccessArrayReader.readString(JI)Ljava/lang/String;
org/platformlambda/core/system/Platform.lambda$waitForProviders$5(Lio/vertx/core/Promise;)V
org/yaml/snakeyaml/DumperOptions.setTimeZone(Ljava/util/TimeZone;)V
org/yaml/snakeyaml/comments/CommentEventsCollector$1.peek()Ljava/lang/Object;
nonapi/io/github/classgraph/utils/FileUtils.lookupCleanMethodPrivileged()V
nonapi/io/github/classgraph/recycler/Recycler.recycle(Ljava/lang/Object;)V
nonapi/io/github/classgraph/scanspec/AcceptReject.rejectIsEmpty()Z
org/yaml/snakeyaml/scanner/ScannerImpl.fetchStreamStart()V
nonapi/io/github/classgraph/classpath/ClassLoaderFinder.getContextClassLoaders()[Ljava/lang/ClassLoader;
io/github/classgraph/Scanner$3.compare(Ljava/lang/Object;Ljava/lang/Object;)I
org/yaml/snakeyaml/scanner/ScannerImpl.checkDocumentStart()Z
io/github/classgraph/Scanner$2.processWorkUnit(Lio/github/classgraph/Scanner$ClasspathEntryWorkUnit;Lnonapi/io/github/classgraph/concurrency/WorkQueue;Lnonapi/io/github/classgraph/utils/LogNode;)V
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$RecyclableInflater.getInflater()Ljava/util/zip/Inflater;
nonapi/io/github/classgraph/concurrency/InterruptionChecker.checkAndReturn()Z
nonapi/io/github/classgraph/classloaderhandler/OSGiDefaultClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
org/yaml/snakeyaml/TypeDescription.getType()Ljava/lang/Class;
nonapi/io/github/classgraph/utils/FileUtils$1.call()Ljava/lang/Void;
org/yaml/snakeyaml/constructor/SafeConstructor.constructMapping2ndStep(Lorg/yaml/snakeyaml/nodes/MappingNode;Ljava/util/Map;)V
org/platformlambda/core/system/Platform.getValidatedRoute(Ljava/lang/String;)Ljava/lang/String;
io/github/classgraph/Scanner$2$1.newInstance()Lio/github/classgraph/ClasspathElement;
nonapi/io/github/classgraph/utils/URLPathEncoder.encodePath(Ljava/lang/String;)Ljava/lang/String;
nonapi/io/github/classgraph/utils/URLPathEncoder.normalizeURLPath(Ljava/lang/String;)Ljava/lang/String;
org/yaml/snakeyaml/events/DocumentEndEvent.getEventId()Lorg/yaml/snakeyaml/events/Event$ID;
nonapi/io/github/classgraph/utils/StringUtils.readString([BIIZZ)Ljava/lang/String;
org/platformlambda/core/system/ServiceDef.getRoute()Ljava/lang/String;
nonapi/io/github/classgraph/fastzipfilereader/FastZipEntry.compareTo(Lnonapi/io/github/classgraph/fastzipfilereader/FastZipEntry;)I
org/yaml/snakeyaml/comments/CommentEventsCollector.collectEvents(Lorg/yaml/snakeyaml/events/Event;)Lorg/yaml/snakeyaml/events/Event;
org/platformlambda/core/system/Platform.waitForProviders(Lio/vertx/core/Promise;Ljava/util/List;II)V
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$8.read([BII)I
nonapi/io/github/classgraph/fastzipfilereader/PhysicalZipFile.getFile()Ljava/io/File;
nonapi/io/github/classgraph/reflection/ReflectionDriver$ClassMemberCache.cacheMethod(Ljava/lang/reflect/Method;)V
org/platformlambda/core/system/Platform.hasRoute(Ljava/util/List;)Z
org/yaml/snakeyaml/scanner/ScannerImpl.fetchMoreTokens()V
nonapi/io/github/classgraph/scanspec/ScanSpec.sortPrefixes()V
nonapi/io/github/classgraph/classpath/CallStackReader$2.call()[Ljava/lang/Class;
nonapi/io/github/classgraph/classloaderhandler/ClassLoaderHandlerRegistry$ClassLoaderHandlerRegistryEntry.findClassLoaderOrder(Ljava/lang/ClassLoader;Lnonapi/io/github/classgraph/classpath/ClassLoaderOrder;Lnonapi/io/github/classgraph/utils/LogNode;)V
org/yaml/snakeyaml/scanner/ScannerImpl.checkPlain()Z
nonapi/io/github/classgraph/fileslice/Slice.open()Ljava/io/InputStream;
nonapi/io/github/classgraph/reflection/ReflectionDriver$ClassMemberCache.cacheField(Ljava/lang/reflect/Field;)V
nonapi/io/github/classgraph/scanspec/AcceptReject$AcceptRejectWholeString.isAccepted(Ljava/lang/String;)Z
org/yaml/snakeyaml/constructor/BaseConstructor.getLoadingConfig()Lorg/yaml/snakeyaml/LoaderOptions;
org/yaml/snakeyaml/parser/ParserImpl$ParseDocumentStart.produce()Lorg/yaml/snakeyaml/events/Event;
org/platformlambda/core/util/MultiLevelMap.setElement(Ljava/lang/String;Ljava/lang/Object;Ljava/util/Map;Z)V
org/platformlambda/core/system/Platform.getVertx()Lio/vertx/core/Vertx;
org/platformlambda/core/system/ServiceDef.setManager(Lorg/platformlambda/core/system/ServiceQueue;)V
org/platformlambda/core/system/ServiceQueue$ServiceHandler.lambda$handle$0(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Boolean;
org/yaml/snakeyaml/LoaderOptions.isProcessComments()Z
nonapi/io/github/classgraph/classpath/CallStackReader.getCallStackViaStackWalker()[Ljava/lang/Class;
nonapi/io/github/classgraph/utils/CollectionUtils.sortIfNotEmpty(Ljava/util/List;Ljava/util/Comparator;)V
org/platformlambda/core/system/ServiceDef.setPrivate(Z)Lorg/platformlambda/core/system/ServiceDef;
io/github/classgraph/Scanner.call()Lio/github/classgraph/ScanResult;
org/yaml/snakeyaml/scanner/ScannerImpl.fetchStreamEnd()V
org/yaml/snakeyaml/parser/ParserImpl$ParseDocumentEnd.produce()Lorg/yaml/snakeyaml/events/Event;
nonapi/io/github/classgraph/classloaderhandler/SpringBootRestartClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
nonapi/io/github/classgraph/utils/VersionFinder$OperatingSystem.values()[Lnonapi/io/github/classgraph/utils/VersionFinder$OperatingSystem;
org/yaml/snakeyaml/reader/StreamReader.ensureEnoughData(I)Z
org/yaml/snakeyaml/constructor/BaseConstructor.constructSequenceStep2(Lorg/yaml/snakeyaml/nodes/SequenceNode;Ljava/util/Collection;)V
nonapi/io/github/classgraph/reflection/ReflectionDriver$1.newInstance(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Lnonapi/io/github/classgraph/reflection/ReflectionDriver$ClassMemberCache;
nonapi/io/github/classgraph/fastzipfilereader/PhysicalZipFile.getPathStr()Ljava/lang/String;
nonapi/io/github/classgraph/fileslice/reader/RandomAccessFileChannelReader.readUnsignedInt(J)J
nonapi/io/github/classgraph/scanspec/AcceptReject$AcceptRejectWholeString.acceptHasPrefix(Ljava/lang/String;)Z
nonapi/io/github/classgraph/reflection/ReflectionDriver.findInstanceField(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/reflect/Field;
org/platformlambda/core/util/ElasticQueue.read()[B
nonapi/io/github/classgraph/scanspec/AcceptReject$AcceptRejectWholeString.isAcceptedAndNotRejected(Ljava/lang/String;)Z
org/yaml/snakeyaml/LoaderOptions.isWrappedToRootException()Z
org/yaml/snakeyaml/constructor/BaseConstructor.getPropertyUtils()Lorg/yaml/snakeyaml/introspector/PropertyUtils;
org/platformlambda/core/system/ServiceQueue$ServiceHandler.getWorker(Ljava/lang/String;)Ljava/lang/String;
org/platformlambda/core/util/MultiLevelMap.setElement(Ljava/lang/String;Ljava/lang/Object;)Lorg/platformlambda/core/util/MultiLevelMap;
org/yaml/snakeyaml/composer/Composer.composeKeyNode(Lorg/yaml/snakeyaml/nodes/MappingNode;)Lorg/yaml/snakeyaml/nodes/Node;
nonapi/io/github/classgraph/classloaderhandler/JPMSClassLoaderHandler.findClasspathOrder(Ljava/lang/ClassLoader;Lnonapi/io/github/classgraph/classpath/ClasspathOrder;Lnonapi/io/github/classgraph/scanspec/ScanSpec;Lnonapi/io/github/classgraph/utils/LogNode;)V
nonapi/io/github/classgraph/fastzipfilereader/LogicalZipFile.parseManifest(Lnonapi/io/github/classgraph/fastzipfilereader/FastZipEntry;Lnonapi/io/github/classgraph/utils/LogNode;)V
org/platformlambda/core/system/ServiceQueue$ServiceHandler.handle(Lio/vertx/core/eventbus/Message;)V
nonapi/io/github/classgraph/reflection/StandardReflectionDriver.tryMakeAccessible(Ljava/lang/reflect/AccessibleObject;)Z
nonapi/io/github/classgraph/concurrency/WorkQueue.runWorkLoop()V
org/yaml/snakeyaml/DumperOptions.getDefaultScalarStyle()Lorg/yaml/snakeyaml/DumperOptions$ScalarStyle;
nonapi/io/github/classgraph/fileslice/reader/RandomAccessArrayReader.readUnsignedByte(J)I
io/github/classgraph/ScanResult.getAllResources()Lio/github/classgraph/ResourceList;
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler.markSliceAsClosed(Lnonapi/io/github/classgraph/fileslice/Slice;)V
io/github/classgraph/ModuleRef.compareTo(Ljava/lang/Object;)I
nonapi/io/github/classgraph/fastzipfilereader/PhysicalZipFile.hashCode()I
nonapi/io/github/classgraph/fastzipfilereader/LogicalZipFile.manifestKeyToBytes(Ljava/lang/String;)[B
org/yaml/snakeyaml/scanner/ScannerImpl.checkToken([Lorg/yaml/snakeyaml/tokens/Token$ID;)Z
io/github/classgraph/Scanner.openClasspathElementsThenScan()Lio/github/classgraph/ScanResult;
org/yaml/snakeyaml/scanner/ScannerImpl.scanComment(Lorg/yaml/snakeyaml/comments/CommentType;)Lorg/yaml/snakeyaml/tokens/CommentToken;
org/yaml/snakeyaml/TypeDescription.setPropertyUtils(Lorg/yaml/snakeyaml/introspector/PropertyUtils;)V
org/yaml/snakeyaml/TypeDescription.newInstance(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
org/platformlambda/core/util/SimpleCache.put(Ljava/lang/String;Ljava/lang/Object;)V
nonapi/io/github/classgraph/concurrency/InterruptionChecker.check()V
org/yaml/snakeyaml/constructor/BaseConstructor.constructMapping2ndStep(Lorg/yaml/snakeyaml/nodes/MappingNode;Ljava/util/Map;)V
org/yaml/snakeyaml/parser/ParserImpl.checkEvent(Lorg/yaml/snakeyaml/events/Event$ID;)Z
nonapi/io/github/classgraph/classloaderhandler/UnoOneJarClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
org/yaml/snakeyaml/scanner/ScannerImpl.scanFlowScalarSpaces(Lorg/yaml/snakeyaml/error/Mark;)Ljava/lang/String;
io/github/classgraph/ScanResult.init(Lnonapi/io/github/classgraph/reflection/ReflectionUtils;)V
org/yaml/snakeyaml/parser/ParserImpl$ParseBlockSequenceEntryKey.produce()Lorg/yaml/snakeyaml/events/Event;
org/yaml/snakeyaml/constructor/Constructor.checkRoot(Ljava/lang/Class;)Ljava/lang/Class;
org/platformlambda/core/system/Platform.register(Ljava/lang/String;Lorg/platformlambda/core/models/TypedLambdaFunction;ZI)V
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler.readAllBytesAsArray(Ljava/io/InputStream;J)[B
nonapi/io/github/classgraph/utils/FileUtils.closeDirectByteBufferPrivileged(Ljava/nio/ByteBuffer;Lnonapi/io/github/classgraph/utils/LogNode;)Z
org/yaml/snakeyaml/resolver/Resolver.addImplicitResolver(Lorg/yaml/snakeyaml/nodes/Tag;Ljava/util/regex/Pattern;Ljava/lang/String;I)V
nonapi/io/github/classgraph/classloaderhandler/WebsphereTraditionalClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
nonapi/io/github/classgraph/classloaderhandler/URLClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
nonapi/io/github/classgraph/concurrency/WorkQueue.close()V
org/platformlambda/core/system/Platform.lambda$waitForProviders$2(Lio/vertx/core/Promise;Ljava/util/List;ILjava/lang/Long;)V
org/platformlambda/core/system/Platform.getEventExecutor()Ljava/util/concurrent/ExecutorService;
org/platformlambda/core/system/LocalPubSub.createTopic(Ljava/lang/String;)V
org/yaml/snakeyaml/Yaml.loadFromReader(Lorg/yaml/snakeyaml/reader/StreamReader;Ljava/lang/Class;)Ljava/lang/Object;
org/platformlambda/core/system/EventEmitter.addRouteSubstitution(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
org/platformlambda/core/util/ElasticQueue.isClosed()Z
nonapi/io/github/classgraph/concurrency/SingletonMap$SingletonHolder.set(Ljava/lang/Object;)V
nonapi/io/github/classgraph/concurrency/WorkQueue.access$000(Lnonapi/io/github/classgraph/concurrency/WorkQueue;)V
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$RecyclableInflater.close()V
org/yaml/snakeyaml/scanner/ScannerImpl.needMoreTokens()Z
nonapi/io/github/classgraph/utils/VersionFinder.getProperty(Ljava/lang/String;)Ljava/lang/String;
kotlin/jvm/internal/Intrinsics.checkNotNullExpressionValue(Ljava/lang/Object;Ljava/lang/String;)V
nonapi/io/github/classgraph/utils/JarUtils.smartPathSplit(Ljava/lang/String;Lnonapi/io/github/classgraph/scanspec/ScanSpec;)[Ljava/lang/String;
nonapi/io/github/classgraph/reflection/StandardReflectionDriver.findClass(Ljava/lang/String;)Ljava/lang/Class;
org/yaml/snakeyaml/constructor/BaseConstructor.setWrappedToRootException(Z)V
org/yaml/snakeyaml/comments/CommentEventsCollector$1.peek()Lorg/yaml/snakeyaml/events/Event;
org/platformlambda/core/system/Platform.logRecently(Ljava/lang/String;Ljava/lang/String;)V
nonapi/io/github/classgraph/utils/FastPathResolver.normalizePath(Ljava/lang/String;Z)Ljava/lang/String;
nonapi/io/github/classgraph/fastzipfilereader/ZipFileSlice.getPath()Ljava/lang/String;
org/yaml/snakeyaml/parser/ParserImpl.peekEvent()Lorg/yaml/snakeyaml/events/Event;
io/github/classgraph/Scanner.findNestedClasspathElements(Ljava/util/List;Lnonapi/io/github/classgraph/utils/LogNode;)V
org/platformlambda/core/system/ServiceQueue.access$200(Lorg/platformlambda/core/system/ServiceQueue;)Ljava/util/concurrent/ConcurrentMap;
org/yaml/snakeyaml/parser/ParserImpl.access$2100(Lorg/yaml/snakeyaml/parser/ParserImpl;)Lorg/yaml/snakeyaml/events/Event;
org/platformlambda/core/system/Platform.waitForProviders(Ljava/util/List;I)Lio/vertx/core/Future;
org/yaml/snakeyaml/reader/StreamReader.getColumn()I
org/yaml/snakeyaml/tokens/BlockEndToken.getTokenId()Lorg/yaml/snakeyaml/tokens/Token$ID;
nonapi/io/github/classgraph/classloaderhandler/WebsphereLibertyClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
nonapi/io/github/classgraph/classpath/CallStackReader$1.invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;
nonapi/io/github/classgraph/utils/FastPathResolver.resolve(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
nonapi/io/github/classgraph/utils/FileUtils$1.call()Ljava/lang/Object;
nonapi/io/github/classgraph/utils/FileUtils.getParentDirPath(Ljava/lang/String;C)Ljava/lang/String;
nonapi/io/github/classgraph/scanspec/AcceptReject.pathToPackageName(Ljava/lang/String;)Ljava/lang/String;
nonapi/io/github/classgraph/scanspec/AcceptReject.acceptAndRejectAreEmpty()Z
org/yaml/snakeyaml/nodes/Tag.equals(Ljava/lang/Object;)Z
org/yaml/snakeyaml/constructor/BaseConstructor.constructObject(Lorg/yaml/snakeyaml/nodes/Node;)Ljava/lang/Object;
org/yaml/snakeyaml/scanner/ScannerImpl.addToken(ILorg/yaml/snakeyaml/tokens/Token;)V
org/yaml/snakeyaml/parser/ParserImpl$ParseStreamStart.produce()Lorg/yaml/snakeyaml/events/Event;
org/yaml/snakeyaml/scanner/ScannerImpl.fetchFlowScalar(C)V
org/yaml/snakeyaml/representer/BaseRepresenter.setDefaultScalarStyle(Lorg/yaml/snakeyaml/DumperOptions$ScalarStyle;)V
org/platformlambda/core/util/SimpleCache.exists(Ljava/lang/String;)Z
nonapi/io/github/classgraph/utils/FileUtils.checkCanReadAndIsFile(Ljava/io/File;)V
org/yaml/snakeyaml/scanner/SimpleKey.getLine()I
nonapi/io/github/classgraph/concurrency/WorkQueue$1.call()Ljava/lang/Object;
org/platformlambda/core/system/ServiceDef.isKotlin()Z
nonapi/io/github/classgraph/concurrency/WorkQueue.startWorkers(Ljava/util/concurrent/ExecutorService;I)V
org/yaml/snakeyaml/comments/CommentEventsCollector.consume()Ljava/util/List;
org/yaml/snakeyaml/resolver/ResolverTuple.getTag()Lorg/yaml/snakeyaml/nodes/Tag;
org/yaml/snakeyaml/parser/ParserImpl$ParseBlockMappingKey.produce()Lorg/yaml/snakeyaml/events/Event;
org/yaml/snakeyaml/composer/Composer.composeValueNode(Lorg/yaml/snakeyaml/nodes/MappingNode;)Lorg/yaml/snakeyaml/nodes/Node;
org/yaml/snakeyaml/nodes/Tag.getValue()Ljava/lang/String;
nonapi/io/github/classgraph/fileslice/reader/RandomAccessArrayReader.readString(JIZZ)Ljava/lang/String;
io/github/classgraph/Scanner.findClasspathOrderRec(Lio/github/classgraph/ClasspathElement;Ljava/util/Set;Ljava/util/List;)V
nonapi/io/github/classgraph/classpath/ClasspathOrder.filter(Ljava/net/URL;Ljava/lang/String;)Z
org/yaml/snakeyaml/representer/SafeRepresenter.setTimeZone(Ljava/util/TimeZone;)V
org/yaml/snakeyaml/scanner/ScannerImpl.scanFlowScalar(C)Lorg/yaml/snakeyaml/tokens/Token;
nonapi/io/github/classgraph/classloaderhandler/TomcatWebappClassLoaderBaseHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
org/yaml/snakeyaml/parser/ParserImpl.getEvent()Lorg/yaml/snakeyaml/events/Event;
org/yaml/snakeyaml/representer/BaseRepresenter.setDefaultFlowStyle(Lorg/yaml/snakeyaml/DumperOptions$FlowStyle;)V
org/yaml/snakeyaml/resolver/ResolverTuple.getRegexp()Ljava/util/regex/Pattern;
org/yaml/snakeyaml/util/ArrayStack.isEmpty()Z
nonapi/io/github/classgraph/classloaderhandler/CxfContainerClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
org/yaml/snakeyaml/DumperOptions.setDefaultScalarStyle(Lorg/yaml/snakeyaml/DumperOptions$ScalarStyle;)V
org/yaml/snakeyaml/DumperOptions.setAllowReadOnlyProperties(Z)V
org/yaml/snakeyaml/TypeDescription.getTag()Lorg/yaml/snakeyaml/nodes/Tag;
org/yaml/snakeyaml/comments/CommentEventsCollector.collectEvents()Lorg/yaml/snakeyaml/comments/CommentEventsCollector;
nonapi/io/github/classgraph/reflection/StandardReflectionDriver.getDeclaredMethods(Ljava/lang/Class;)[Ljava/lang/reflect/Method;
nonapi/io/github/classgraph/reflection/ReflectionDriver.isAccessible(Ljava/lang/Object;Ljava/lang/reflect/AccessibleObject;)Z
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$6.newInstance()Lnonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$RecyclableInflater;
nonapi/io/github/classgraph/classloaderhandler/WeblogicClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
org/platformlambda/core/util/MultiLevelMap.expandList(Ljava/util/List;Ljava/util/List;)Ljava/util/List;
nonapi/io/github/classgraph/fastzipfilereader/ZipFileSlice.hashCode()I
nonapi/io/github/classgraph/reflection/ReflectionDriver.findStaticMethod(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
nonapi/io/github/classgraph/concurrency/WorkQueue.addWorkUnits(Ljava/util/Collection;)V
org/yaml/snakeyaml/tokens/ValueToken.getTokenId()Lorg/yaml/snakeyaml/tokens/Token$ID;
io/github/classgraph/Scanner.access$100(Lio/github/classgraph/Scanner;)Lnonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler;
org/yaml/snakeyaml/tokens/StreamEndToken.getTokenId()Lorg/yaml/snakeyaml/tokens/Token$ID;
nonapi/io/github/classgraph/classloaderhandler/QuarkusClassLoaderHandler.canHandle(Ljava/lang/Class;Lnonapi/io/github/classgraph/utils/LogNode;)Z
nonapi/io/github/classgraph/concurrency/WorkQueue$1.call()Ljava/lang/Void;
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler.access$100(Lnonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler;)Lnonapi/io/github/classgraph/concurrency/SingletonMap;
io/github/classgraph/ClassGraph.scan(Ljava/util/concurrent/ExecutorService;I)Lio/github/classgraph/ScanResult;
nonapi/io/github/classgraph/scanspec/AcceptReject.sortPrefixes()V
nonapi/io/github/classgraph/reflection/ReflectionDriver.findInstanceMethod(Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
nonapi/io/github/classgraph/reflection/ReflectionDriver.findField(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/reflect/Field;
nonapi/io/github/classgraph/fastzipfilereader/NestedJarHandler$8.read()I
nonapi/io/github/classgraph/fileslice/Slice.open(Lio/github/classgraph/Resource;)Ljava/io/InputStream;
org/platformlambda/core/system/EventEmitter.getRouteSubstitutionConfig(Ljava/lang/String;)Lorg/platformlambda/core/util/ConfigReader;
org/yaml/snakeyaml/resolver/Resolver.addImplicitResolvers()V
io/github/classgraph/ClassGraph.acceptPathsNonRecursive([Ljava/lang/String;)Lio/github/classgraph/ClassGraph;
nonapi/io/github/classgraph/concurrency/WorkQueue.addWorkUnit(Ljava/lang/Object;)V
org/yaml/snakeyaml/DumperOptions.getNonPrintableStyle()Lorg/yaml/snakeyaml/DumperOptions$NonPrintableStyle;
org/yaml/snakeyaml/parser/ParserImpl.parseBlockNodeOrIndentlessSequence()Lorg/yaml/snakeyaml/events/Event;
org/yaml/snakeyaml/constructor/BaseConstructor.createDefaultMap(I)Ljava/util/Map;
nonapi/io/github/classgraph/reflection/ReflectionDriver$1.newInstance(Ljava/lang/Object;Lnonapi/io/github/classgraph/utils/LogNode;)Ljava/lang/Object;
org/platformlambda/core/MulticastTest.routingTest()V
org/yaml/snakeyaml/scanner/Constant.has(I)Z
org/platformlambda/core/util/ElasticQueue.shutdown()V
nonapi/io/github/classgraph/scanspec/AcceptReject.acceptIsEmpty()Z
org/platformlambda/core/system/ServiceQueue.access$100(Lorg/platformlambda/core/system/ServiceQueue;)Z
org/yaml/snakeyaml/scanner/ScannerImpl.removePossibleSimpleKey()V
org/platformlambda/core/system/ServiceDef.setConcurrency(I)Lorg/platformlambda/core/system/ServiceDef;
nonapi/io/github/classgraph/classpath/SystemJarFinder.addJREPath(Ljava/io/File;)Z
